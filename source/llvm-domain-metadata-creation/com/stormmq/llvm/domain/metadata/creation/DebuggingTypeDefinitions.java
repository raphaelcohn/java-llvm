// The MIT License (MIT)
//
// Copyright Â© 2016, Raphael Cohn <raphael.cohn@stormmq.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

package com.stormmq.llvm.domain.metadata.creation;

import com.stormmq.llvm.domain.ReferenceTracker;
import com.stormmq.llvm.domain.target.DataLayoutSpecification;
import com.stormmq.llvm.domain.metadata.debugging.*;
import com.stormmq.llvm.domain.types.SizedType;
import com.stormmq.llvm.domain.types.firstClassTypes.aggregateTypes.structureTypes.SizedStructureSizedType;
import com.stormmq.string.AbstractToString;
import org.jetbrains.annotations.*;

import java.util.*;
import java.util.concurrent.locks.ReadWriteLock;

import static com.stormmq.functions.collections.CollectionHelper.add;
import static com.stormmq.functions.collections.ListHelper.newArrayList;
import static com.stormmq.llvm.domain.metadata.debugging.DIDerivedTypeKeyedMetadataTuple.constant;
import static com.stormmq.llvm.domain.metadata.debugging.DIDerivedTypeKeyedMetadataTuple.pointer;
import static com.stormmq.llvm.domain.metadata.debugging.DIDerivedTypeKeyedMetadataTuple.structMember;
import static com.stormmq.llvm.domain.metadata.debugging.ScopeMetadata.UnknownLineNumber;
import static java.lang.System.identityHashCode;

public final class DebuggingTypeDefinitions<N> extends AbstractToString
{
	@NotNull private final DataLayoutSpecification dataLayoutSpecification;
	@NotNull private final ReferenceTracker referenceTracker;
	@NotNull private final DIFileKeyedMetadataTuple file;
	@NotNull private final NamespaceSplitter<N> namespaceSplitter;
	@NotNull private final Map<String, DIBasicTypeKeyedMetadataTuple> knownBasicTypes;
	@NotNull private final Map<TypeMetadata, DIDerivedTypeKeyedMetadataTuple> knownConstantTypes;
	@NotNull private final Map<NamespacedTypeName<N>, DICompositeTypeKeyedMetadataTuple> knownStructureTypes;
	@NotNull private final CTypeMappings cTypeMappings;

	// Names are those generated by clang from C code
	public DebuggingTypeDefinitions(@NotNull final DataLayoutSpecification dataLayoutSpecification, @NotNull final ReferenceTracker referenceTracker, @NotNull final DIFileKeyedMetadataTuple file, @NotNull final NamespaceSplitter<N> namespaceSplitter, @NotNull final CTypeMappings cTypeMappings)
	{
		this.dataLayoutSpecification = dataLayoutSpecification;
		this.referenceTracker = referenceTracker;
		this.file = file;
		this.namespaceSplitter = namespaceSplitter;
		knownBasicTypes = new HashMap<>(32);
		knownConstantTypes = new HashMap<>(128);
		knownStructureTypes = new HashMap<>(64);

		this.cTypeMappings = cTypeMappings;
	}

	@NotNull
	@Override
	protected Object[] fields()
	{
		return fields(dataLayoutSpecification, identityHashCode(referenceTracker), file, cTypeMappings);
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forBoolean()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesABoolean());
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forByte()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesASigned8BitInteger());
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forShort()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesASigned16BitInteger());
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forChar()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesAnUnsigned16BitInteger());
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forInt()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesASigned32BitInteger());
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forLong()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesASigned64BitInteger());
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forFloat()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesABinary32Float());
	}

	@NotNull
	public DIBasicTypeKeyedMetadataTuple forDouble()
	{
		return basicType(cTypeMappings.cNameThatClosestMatchesABinary64Float());
	}

	@NotNull
	private DIBasicTypeKeyedMetadataTuple basicType(@NonNls @NotNull final String cName)
	{
		return knownBasicTypes.computeIfAbsent(cName, key ->
		{
			final CTypeMapping cTypeMapping = cTypeMappings.basicType(key);
			return new DIBasicTypeKeyedMetadataTuple(referenceTracker, key, cTypeMapping.storageSizeInBits(dataLayoutSpecification), cTypeMapping.abiAlignmentInBits(dataLayoutSpecification), cTypeMapping.dwarfTypeEncoding());
		});
	}

	@NotNull
	public DIDerivedTypeKeyedMetadataTuple fieldConstantDerivedType(@NotNull final TypeMetadata baseType)
	{
		if (baseType instanceof DIDerivedTypeKeyedMetadataTuple)
		{
			if (((DIDerivedTypeKeyedMetadataTuple) baseType).isConstType())
			{
				return (DIDerivedTypeKeyedMetadataTuple) baseType;
			}
		}
		return knownConstantTypes.computeIfAbsent(baseType, typeMetadata -> constant(referenceTracker, file, UnknownLineNumber, baseType, baseType.storageSizeInBits(), baseType.abiAlignmentInBits()));
	}

	@NotNull
	public DIDerivedTypeKeyedMetadataTuple pointerTo(@NotNull final TypeMetadata baseType)
	{
		if (baseType instanceof DIDerivedTypeKeyedMetadataTuple)
		{
			if (((DIDerivedTypeKeyedMetadataTuple) baseType).isPointerType())
			{
				return (DIDerivedTypeKeyedMetadataTuple) baseType;
			}
		}
		return knownConstantTypes.computeIfAbsent(baseType, typeMetadata -> pointer(referenceTracker, file, UnknownLineNumber, baseType, dataLayoutSpecification.pointerStorageSizeInBits(), dataLayoutSpecification.pointerAbiAlignmentInBits()));
	}

	@SuppressWarnings("MethodCanBeVariableArityMethod")
	@NotNull
	public DICompositeTypeKeyedMetadataTuple structureType(@NotNull final SizedStructureSizedType sizedStructureSizedType, @NotNull final NamespacedTypeName<N> namespacedTypeName, @NotNull final DebuggingFieldDetail<N>[] debuggingFieldDetails)
	{
		@Nullable final DICompositeTypeKeyedMetadataTuple existingButPossiblyUnpopulated = knownStructureTypes.get(namespacedTypeName);
		if (existingButPossiblyUnpopulated != null)
		{
			return existingButPossiblyUnpopulated;
		}

		// Done this way in case of circular references
		final int storageSizeInBits = sizedStructureSizedType.storageSizeInBits(dataLayoutSpecification);
		final int abiAlignmentInBits = sizedStructureSizedType.abiAlignmentInBits(dataLayoutSpecification);
		final DICompositeTypeKeyedMetadataTuple unpopulatedButExtantInCaseOfCircularReferences = new DICompositeTypeKeyedMetadataTuple(referenceTracker, storageSizeInBits, abiAlignmentInBits);
		knownStructureTypes.put(namespacedTypeName, unpopulatedButExtantInCaseOfCircularReferences);

		final int length = debuggingFieldDetails.length;
		final List<DIDerivedTypeKeyedMetadataTuple> elements = newArrayList(length << 1, list ->
		{
			final int[] offsets = sizedStructureSizedType.offsets(dataLayoutSpecification);
			for(int index = 0; index < length; index++)
			{
				final DebuggingFieldDetail<N> debuggingFieldDetail = debuggingFieldDetails[index];
				final String fieldName = debuggingFieldDetail.fieldName();
				final SizedType fieldType = debuggingFieldDetail.fieldType();
				final boolean isConstantField = debuggingFieldDetail.isConstant();
				final int offset = offsets[index];

				final TypeMetadata underlyingType = debuggingFieldDetail.asTypeMetadata(this);
				final TypeMetadata underlyingTypeX = isConstantField ? fieldConstantDerivedType(underlyingType) : underlyingType;
				final int elementStorageSizeInBits = fieldType.storageSizeInBits(dataLayoutSpecification);
				final int elementAbiAlignmentInBits = fieldType.abiAlignmentInBits(dataLayoutSpecification);
				final DIDerivedTypeKeyedMetadataTuple element = structMember(referenceTracker, unpopulatedButExtantInCaseOfCircularReferences, file, UnknownLineNumber, underlyingTypeX, elementStorageSizeInBits, elementAbiAlignmentInBits, fieldName, offset);
				add(list, element);
			}
		});

		final DINamespaceKeyedMetadataTuple namespaceMetadata = namespacedTypeName.createDebuggingNamespace(referenceTracker, file, namespaceSplitter);
		final String identifier = namespacedTypeName.mangleIdentifier(namespaceSplitter);
		return unpopulatedButExtantInCaseOfCircularReferences.populateStructure(namespacedTypeName.simpleName, namespaceMetadata, file, UnknownLineNumber, identifier, sizedStructureSizedType.isPacked(), elements);
	}
}
