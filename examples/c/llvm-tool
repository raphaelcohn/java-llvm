#!/usr/bin/env sh
# This file is part of java-llvm. It is subject to the licence terms in the COPYRIGHT file found in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/java-llvm/master/COPYRIGHT. No part of java-llvm, including this file, may be copied, modified, propagated, or distributed except according to the terms contained in the COPYRIGHT file.
# Copyright Â© 2016 The developers of java-llvm. See the COPYRIGHT file in the top-level directory of this distribution and at https://raw.githubusercontent.com/raphaelcohn/java-llvm/master/COPYRIGHT.
set -u
set -e

toolsPath='/usr/local/opt/llvm37/lib/llvm-3.7/bin'
systemHeadersPath='/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.10.sdk/usr/include'

_llvm_tool()
{
	PATH="$toolsPath":"$PATH" "$@"
}

_llvm_tool_config()
{
	_llvm_tool llvm-config "$@"
}

_llvm_architecture_help()
{
	local architecture="$1"
	local helpOn="cpu"
	
	_llvm_tool llvm-as </dev/null | _llvm_tool llc -march="$architecture" -m${helpOn}=help
}

_llvm_architecture_help_cpus()
{
	_llvm_architecture_help "$1" 'cpu'
}

_llvm_architecture_help_attributes()
{
	_llvm_architecture_help "$1" 'attr'
}

compileToAssemblyLanguage()
{
	local outputFilePath="$baseFilePath".ll
	
	if [ -f "$outputFilePath" ]; then
		if $force; then
			rm -rf "$outputFilePath"
		else
			return 0
		fi
	fi
	
	_llvm_tool clang -c -S -emit-llvm -isystem "$systemHeadersPath" "$filePath"
}

assembleToBitCode()
{
	local outputFilePath="$baseFilePath".bc
	
	_llvm_tool llvm-as -o="$outputFilePath" "$baseFilePath".ll
}

dissembleBitCodeToAssemblyLanguage()
{
	local outputFilePath="$baseFilePath".dis.ll
	
	_llvm_tool llvm-dis -o="$outputFilePath" "$baseFilePath".bc
}

assembleToLocalAssemblyAtt()
{
	local outputFilePath="$baseFilePath".att.s
	
	_llvm_tool llc -o="$outputFilePath" --x86-asm-syntax=att "$baseFilePath".ll
}

assembleToLocalAssemblyIntel()
{
	local outputFilePath="$baseFilePath".intel.s
	
	_llvm_tool llc -o="$outputFilePath" --x86-asm-syntax=intel "$baseFilePath".ll
}

optimiseAssemblyLanguage()
{
	local outputFilePath="$baseFilePath".opt.ll
	
	_llvm_tool opt -o="$outputFilePath" -S "$baseFilePath".ll
}

justInTime()
{
	_llvm_tool lli -relocation-model=pic -fake-argv0="$baseFilePath" "$baseFilePath".bc "$@"
}

loop()
{
	local extension="$1"
	shift 1
	
	local filePath
	for filePath in *."$extension"; do
		if [ ! -f "$filePath" ]; then
			continue
		fi
		
		local withoutPeriods="${filePath%%.*}"
		if [ "$withoutPeriods"."$extension" != "$filePath" ]; then
			continue
		fi
		
		local baseFilePath="${filePath%.*}"
		
		local action
		for action in "$@"
		do
			$action  "$filePath" "$baseFilePath"
		done
	done
}

compile()
{
	local force=false
	
	if [ $# -ne 0 ]; then
		if [ "$1" = "--force" ]; then
			force=true
		fi

		if [ "$1" = "-f" ]; then
			force=true
		fi
	fi
	
	loop c   compileToAssemblyLanguage assembleToBitCode dissembleBitCodeToAssemblyLanguage assembleToLocalAssemblyAtt assembleToLocalAssemblyIntel optimiseAssemblyLanguage
	loop cpp compileToAssemblyLanguage assembleToBitCode dissembleBitCodeToAssemblyLanguage assembleToLocalAssemblyAtt assembleToLocalAssemblyIntel optimiseAssemblyLanguage
}

jit()
{
	if [ $# -eq 0 ]; then
		printf '%s\n' "Please supply a .ll file (without .ll) to JIT"
		exit 1
	fi
	
	local filePath="$1".ll
	local baseFilePath="${filePath%.*}"
	
	assembleToBitCode
	justInTime "$@"
}

architecture()
{
	local architecture
	for architecture in 'x86' 'x86-64'
	do
		_llvm_architecture_help_cpus "$architecture"
		_llvm_architecture_help_attributes "$architecture"
	done
}

linkAssemblyCode()
{
	if [ $# -eq 0 ]; then
		printf '%s\n' "Please supply a name"
		exit 1
	fi
	
	local name="$1"
	shift 1
	
	if [ $# -eq 0 ]; then
		printf '%s\n' "Please supply at least one file to link"
		exit 1
	fi
	
	_llvm_tool llvm-link -S -o=./"$name".ll "$@"
}

linkBitCode()
{
	if [ $# -eq 0 ]; then
		printf '%s\n' "Please supply a linked file name (without extension)"
		exit 1
	fi
	
	local name="$1"
	shift 1
	
	if [ $# -eq 0 ]; then
		printf '%s\n' "Please supply at least one file to link"
		exit 1
	fi
	
	local linkFilePath=./"$name".bc
	
	local index=1
	local filePath
	for filePath in "$@"
	do
		local baseFilePath="${filePath%.*}"
		
		if [ "$baseFilePath".ll != "$filePath" ]; then
			printf '%s\n' "Please supply LLVM assembly (.ll) files"
		fi
	
		assembleToBitCode
		
		if [ $index -eq 1 ]; then
			set -- "$baseFilePath".bc
		else
			set -- "$@" "$baseFilePath".bc
		fi
		index=$((index+1))
	done
	
	_llvm_tool llvm-link -o="$linkFilePath" "$@"
}

archiveBitCodeWithSymbolTable()
{
	if [ $# -eq 0 ]; then
		printf '%s\n' "Please supply an archive name (without file extension)"
		exit 1
	fi
	
	local name="$1"
	shift 1
	
	if [ $# -eq 0 ]; then
		printf '%s\n' "Please supply at least one file to archive"
		exit 1
	fi
	
	local archiveFilePath=./"$name".a
	
	local index=1
	local filePath
	for filePath in "$@"
	do
		local baseFilePath="${filePath%.*}"
		
		if [ "$baseFilePath".ll != "$filePath" ]; then
			printf '%s\n' "Please supply LLVM assembly (.ll) files"
		fi
	
		assembleToBitCode
		
		if [ $index -eq 1 ]; then
			set -- "$baseFilePath".bc
		else
			set -- "$@" "$baseFilePath".bc
		fi
		index=$((index+1))
	done
	
	rm -rf "$archiveFilePath"
	
	# llvm-ar IGNORES chmod settings, and records all .bc files as 0644
	_llvm_tool fakeroot llvm-ar csru "$archiveFilePath" "$@"
}

listSymbols()
{
	if [ $# -lt 2 ]; then
		printf '%s\n' "Please supply one or more .a, .bc or .o (.obj) file paths"
		exit 1
	fi
	
	local type
	case "$1" in
		
		debug)
			type='--debug-syms'
		;;
		
		defined)
			type='--defined-only'
		;;
		
		dynamic)
			type='--dynamic'
		;;
		
		public)
			type="--extern-only"
		;;
		
		undefined)
			type="--undefined-only"
		;;
		
		*)
			printf '%s\n' "Unknown type '$type'"
			exit 1
		;;
		
	esac
	
	_llvm_tool llvm-nm --format=bsd --print-file-name --print-size --no-sort "$type" "$@" | sed -e 's,\.a:,\.a/,g' -e 's/: / /g' -e 's/        / --------/g' -e 's/  */ /g' | tr ' ' $'\t'
	
}

main()
{
	local operation
	if [ $# -eq 0 ]; then
		operation=compile
	else
		operation="$1"
	fi
	shift 1
	
	case "$operation" in
		
		compile)
			compile "$@"
		;;
		
		jit)
			jit "$@"
		;;
		
		architecture)
			architecture "$@"
		;;
		
		archive)
			archiveBitCodeWithSymbolTable "$@"
		;;
		
		link)
			linkAssemblyCode "$@"
			linkBitCode "$@"
		;;
		
		nm)
			listSymbols "$@"
		;;
		
		*)
			printf '%s\n' "Unknown operation '$operation'"
			exit 1
		;;
		
	esac
}

main "$@"
